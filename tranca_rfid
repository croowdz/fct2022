#include <LiquidCrystal.h>

//Bibliotecas
#include <SPI.h>
#include <MFRC522.h>

//Pinos
#define LED_VERDE 22
#define LED_VERMELHO 23
#define BUZZER 24
#define RST_PIN 49          // Configurable, see typical pin layout above 
#define SS_PIN 53

String IDtag = ""; //Variável que armazenará o ID da Tag
bool Permitido = false; //Variável que verifica a permissão 

//Vetor responsável por armazenanaos ID's das Tag's cadastradas
String TagsCadastradas[] = {"cdca1adb", // Sem nome
                            "47e6bb8b", //Arthur
                            "85c36edd"}; //Tiago

const int solenoide = 31;                // Declara pino da fechadura elétrica

int timer = 0;
int tela =0;
int tempo2 =0;

MFRC522 LeitorRFID(SS_PIN, RST_PIN);    // Cria uma nova instância para o leitor e passa os pinos como parâmetro
LiquidCrystal lcd(2,3,4,6,7,8,9,10,11,12,13);


void setup() {
        Serial.begin(9600);             // Inicializa a comunicação Serial
        SPI.begin();                    // Inicializa comunicacao SPI 
        LeitorRFID.PCD_Init();          // Inicializa o leitor RFID
        pinMode(LED_VERDE, OUTPUT);     // Declara o pino do led verde como saída
        pinMode(LED_VERMELHO, OUTPUT);  // Declara o pino do led vermelho como saída
        pinMode(BUZZER, OUTPUT);        // Declara o pino do buzzer como saída

        pinMode(solenoide, OUTPUT);
        digitalWrite(solenoide, LOW);
        lcd.begin(16,2);
        
}


void loop() { 
  Leitura();  //Chama a função responsável por fazer a leitura das Tag's
  tempo2 = millis();
  if (tempo2-timer>=2000){
    if (tela==0){
      lcd.noDisplay();
      delay(500);
      // Turn on the display:
      lcdCartao();
      lcd.display();
      tela =1;
      timer=millis();
    }else{
      lcd.noDisplay();
      delay(500);
      lcdFeira();
      lcd.display();
      Leitura();
      tela=0;
      timer=millis();

    }
   }
  //delay(2000);
  //Leitura();
}

void Leitura(){

        IDtag = ""; //Inicialmente IDtag deve estar vazia.
        
        // Verifica se existe uma Tag presente
        if ( !LeitorRFID.PICC_IsNewCardPresent() || !LeitorRFID.PICC_ReadCardSerial() ) {
            delay(50);
            return;
        }
        
        // Pega o ID da Tag através da função LeitorRFID.uid e Armazena o ID na variável IDtag        
        for (byte i = 0; i < LeitorRFID.uid.size; i++) {        
            IDtag.concat(String(LeitorRFID.uid.uidByte[i], HEX));
        }        
        
        //Compara o valor do ID lido com os IDs armazenados no vetor TagsCadastradas[]
        for (int i = 0; i < (sizeof(TagsCadastradas)/sizeof(String)); i++) {
          if(  IDtag.equalsIgnoreCase(TagsCadastradas[i])  ){
              Permitido = true; //Variável Permitido assume valor verdadeiro caso o ID Lido esteja cadastrado
          }
        }       

        if(Permitido == true) acessoLiberado(); //Se a variável Permitido for verdadeira será chamada a função acessoLiberado()        
        else acessoNegado(); //Se não será chamada a função acessoNegado()

        delay(1000); //aguarda 2 segundos para efetuar uma nova leitura
}

void acessoLiberado(){
  Serial.println("Tag Cadastrada: " + IDtag); //Exibe a mensagem "Tag Cadastrada" e o ID da tag não cadastrada
    efeitoPermitido();  //Chama a função efeitoPermitido()
    Permitido = false;  //Seta a variável Permitido como false novamente
    
    delay(3000);
       
}

void acessoNegado(){
  Serial.println("Tag NAO Cadastrada: " + IDtag); //Exibe a mensagem "Tag NAO Cadastrada" e o ID da tag cadastrada
  efeitoNegado(); //Chama a função efeitoNegado()

}

void efeitoPermitido(){  
  int qtd_bips = 2; //definindo a quantidade de bips
  for(int j=0; j<qtd_bips; j++){
    //Ligando o buzzer com uma frequência de 1500 hz e ligando o led verde.
    tone(BUZZER,1500);
    digitalWrite(LED_VERDE, HIGH); 
    delay(100);


    //Desligando o buzzer e led verde.      
    noTone(BUZZER);
    digitalWrite(LED_VERDE, LOW);
    delay(100);
  }
  digitalWrite(solenoide, HIGH);
  lcd.clear();
  lcd.print("Acesso permitido");
  lcd.setCursor(0,1);
  lcd.print("Bem vindo a FCT");
  delay(1500);
  if(  IDtag.equalsIgnoreCase(TagsCadastradas[1])  ){
    lcd.clear();
    lcd.print("Arthur");
    delay(1500);
  }else if(  IDtag.equalsIgnoreCase(TagsCadastradas[2])  ){
    lcd.clear();
    lcd.print("Tiago");
    delay(1500);
  }
  digitalWrite(solenoide, LOW);
}

void efeitoNegado(){  
  int qtd_bips = 1;  //definindo a quantidade de bips
  for(int j=0; j<qtd_bips; j++){   
    //Ligando o buzzer com uma frequência de 500 hz e ligando o led vermelho.
    tone(BUZZER,500);
    digitalWrite(LED_VERMELHO, HIGH);   
    delay(500); 
      
    //Desligando o buzzer e o led vermelho.
    noTone(BUZZER);
    digitalWrite(LED_VERMELHO, LOW);
    delay(500);

  lcd.clear();
  lcd.print("Acesso negado");
  lcd.setCursor(0,1);
  lcd.print("Tente em 3s");
  delay(1000);
  lcd.clear();
  lcd.print("Tente em 2s");
  delay(1000);
  lcd.clear();
  lcd.print("Tente em 1s");
  delay(1000);
  lcd.clear();
  lcd.print("Aguarde ...");
  }
} 
void lcdCartao(){
  lcd.clear();
  lcd.print("Aproxime ");
  lcd.setCursor(0,1);
  lcd.print("o cartao");
}

void lcdFeira(){
  lcd.clear();
  lcd.print("Feira de Ciencias");
  lcd.setCursor(0,1);
  lcd.print("XXIII");
}
